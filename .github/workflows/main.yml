name: Build and Package cf_ddns

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: x86_64
            image: dockcross/linux-x64
            ext: ""
            static: 0
            target: x86_64-linux-gnu
            openssl_arch: linux-x86_64

          - os: linux
            arch: x86
            image: dockcross/linux-x86
            ext: ""
            static: 0
            target: i686-linux-gnu
            openssl_arch: linux-elf

          - os: linux
            arch: armv7
            image: dockcross/linux-armv7
            ext: ""
            static: 0
            target: arm-linux-gnueabihf
            openssl_arch: linux-armv4

          - os: linux
            arch: aarch64
            image: dockcross/linux-arm64-full
            ext: ""
            static: 0
            target: aarch64-linux-gnu
            openssl_arch: linux-aarch64

          - os: windows
            arch: x86_64
            image: dockcross/windows-static-x64
            ext: ".exe"
            static: 1
            target: ""
            openssl_arch: linux-aarch64

          - os: windows
            arch: x86
            image: dockcross/windows-static-x86
            ext: ".exe"
            static: 1
            target: ""
            openssl_arch: linux-aarch64

    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    env:
      HOST_TRIPLE: "${{ matrix.target }}"
      OPENSSL_ARCH: "${{ matrix.openssl_arch }}"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate dockcross script
        run: |
          docker run --rm ${{ matrix.image }} > ./dockcross
          chmod +x ./dockcross

      - name: Download json.hpp if missing
        run: |
          [ -f json.hpp ] || curl -L -o json.hpp https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp

      - name: Install build tools (Linux only)
        if: ${{ matrix.os == 'linux' }}
        run: |
          ./dockcross bash -c "apt-get update && apt-get install -y autoconf libtool pkg-config curl build-essential"

      - name: Build OpenSSL (Linux only)
        if: ${{ matrix.os == 'linux' }}
        run: |
          cat << 'EOF' > build_openssl.sh
          #!/bin/bash
          set -ex

          curl -LO https://www.openssl.org/source/openssl-1.1.1w.tar.gz
          tar xzf openssl-1.1.1w.tar.gz
          cd openssl-1.1.1w

          ./Configure ${OPENSSL_ARCH} no-shared no-tests --prefix=/usr/local/ssl --cross-compile-prefix=${HOST_TRIPLE}-
          make -j$(nproc)
          make install_sw
          EOF

          chmod +x build_openssl.sh
          ./dockcross bash -c "export OPENSSL_ARCH=${{ matrix.openssl_arch }} && ./build_openssl.sh"

      - name: Build libcurl (Linux only)
        if: ${{ matrix.os == 'linux' }}
        run: |
          cat << 'EOF' > build_curl.sh
          set -e
          curl -LO https://curl.se/download/curl-8.8.0.tar.gz
          tar xzf curl-8.8.0.tar.gz
          cd curl-8.8.0
          ./configure --host=${HOST_TRIPLE} --disable-shared --enable-static --with-ssl=/usr/local/ssl 
          make -j$(nproc)
          make install
          EOF
          chmod +x build_curl.sh
          ./dockcross ./build_curl.sh

      - name: Build binary
        run: |
          ./dockcross bash -c "\
            make CXX=\$CXX EXT=${{ matrix.ext }} STATIC=${{ matrix.static }} \
            CPPFLAGS='-I/usr/local/include -I/usr/local/ssl/include' \
            LDFLAGS='-L/usr/local/lib -L/usr/local/ssl/lib' \
            LDLIBS='-lcurl -lssl -lcrypto -lz -ldl'"

      - name: Prepare package
        run: |
          mkdir -p out
          cp cf_ddns${{ matrix.ext }} out/cf_ddns-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}
          cp config.json out/
          cd out && zip cf_ddns-${{ matrix.os }}-${{ matrix.arch }}.zip *

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: cf_ddns-${{ matrix.os }}-${{ matrix.arch }}
          path: out/cf_ddns-${{ matrix.os }}-${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Upload to GitHub Releases
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/**/cf_ddns-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
